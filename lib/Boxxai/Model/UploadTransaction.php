<?php
/**
 * UploadTransaction
 *
 * PHP version 5
 *
 * @category Class
 * @package  Boxxai
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * boxx client
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Boxxai\Model;

use \ArrayAccess;

/**
 * UploadTransaction Class Doc Comment
 *
 * @category    Class */
 // @description Upload data transaction schema
/**
 * @package     Boxxai
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class UploadTransaction implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'upload_transaction';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'customerid' => 'string',
        'properties' => 'map[string,string]',
        'transactionid' => 'string',
        'productid' => 'string',
        'type' => 'string',
        'transactiondate' => 'string'
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'customerid' => 'customerid',
        'properties' => 'properties',
        'transactionid' => 'transactionid',
        'productid' => 'productid',
        'type' => 'type',
        'transactiondate' => 'transactiondate'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'customerid' => 'setCustomerid',
        'properties' => 'setProperties',
        'transactionid' => 'setTransactionid',
        'productid' => 'setProductid',
        'type' => 'setType',
        'transactiondate' => 'setTransactiondate'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'customerid' => 'getCustomerid',
        'properties' => 'getProperties',
        'transactionid' => 'getTransactionid',
        'productid' => 'getProductid',
        'type' => 'getType',
        'transactiondate' => 'getTransactiondate'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['customerid'] = isset($data['customerid']) ? $data['customerid'] : null;
        $this->container['properties'] = isset($data['properties']) ? $data['properties'] : null;
        $this->container['transactionid'] = isset($data['transactionid']) ? $data['transactionid'] : null;
        $this->container['productid'] = isset($data['productid']) ? $data['productid'] : null;
        $this->container['type'] = isset($data['type']) ? $data['type'] : null;
        $this->container['transactiondate'] = isset($data['transactiondate']) ? $data['transactiondate'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];
        if ($this->container['customerid'] === null) {
            $invalid_properties[] = "'customerid' can't be null";
        }
        if ($this->container['transactionid'] === null) {
            $invalid_properties[] = "'transactionid' can't be null";
        }
        if ($this->container['productid'] === null) {
            $invalid_properties[] = "'productid' can't be null";
        }
        if ($this->container['type'] === null) {
            $invalid_properties[] = "'type' can't be null";
        }
        if ($this->container['transactiondate'] === null) {
            $invalid_properties[] = "'transactiondate' can't be null";
        }
        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properteis are valid
     */
    public function valid()
    {
        if ($this->container['customerid'] === null) {
            return false;
        }
        if ($this->container['transactionid'] === null) {
            return false;
        }
        if ($this->container['productid'] === null) {
            return false;
        }
        if ($this->container['type'] === null) {
            return false;
        }
        if ($this->container['transactiondate'] === null) {
            return false;
        }
        return true;
    }


    /**
     * Gets customerid
     * @return string
     */
    public function getCustomerid()
    {
        return $this->container['customerid'];
    }

    /**
     * Sets customerid
     * @param string $customerid
     * @return $this
     */
    public function setCustomerid($customerid)
    {
        $this->container['customerid'] = $customerid;

        return $this;
    }

    /**
     * Gets properties
     * @return map[string,string]
     */
    public function getProperties()
    {
        return $this->container['properties'];
    }

    /**
     * Sets properties
     * @param map[string,string] $properties
     * @return $this
     */
    public function setProperties($properties)
    {
        $this->container['properties'] = $properties;

        return $this;
    }

    /**
     * Gets transactionid
     * @return string
     */
    public function getTransactionid()
    {
        return $this->container['transactionid'];
    }

    /**
     * Sets transactionid
     * @param string $transactionid
     * @return $this
     */
    public function setTransactionid($transactionid)
    {
        $this->container['transactionid'] = $transactionid;

        return $this;
    }

    /**
     * Gets productid
     * @return string
     */
    public function getProductid()
    {
        return $this->container['productid'];
    }

    /**
     * Sets productid
     * @param string $productid
     * @return $this
     */
    public function setProductid($productid)
    {
        $this->container['productid'] = $productid;

        return $this;
    }

    /**
     * Gets type
     * @return string
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     * @param string $type
     * @return $this
     */
    public function setType($type)
    {
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets transactiondate
     * @return string
     */
    public function getTransactiondate()
    {
        return $this->container['transactiondate'];
    }

    /**
     * Sets transactiondate
     * @param string $transactiondate
     * @return $this
     */
    public function setTransactiondate($transactiondate)
    {
        $this->container['transactiondate'] = $transactiondate;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\Boxxai\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\Boxxai\ObjectSerializer::sanitizeForSerialization($this));
    }
}


