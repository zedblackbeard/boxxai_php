<?php
/**
 * InlineResponse200Response
 *
 * PHP version 5
 *
 * @category Class
 * @package  Boxxai
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * boxx client
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Boxxai\Model;

use \ArrayAccess;

/**
 * InlineResponse200Response Class Doc Comment
 *
 * @category    Class */
/**
 * @package     Boxxai
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class InlineResponse200Response implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'inline_response_200_response';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'total_items' => 'int',
        'failed_items' => 'int[]',
        'delete_items' => 'int',
        'found_items' => 'int'
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'total_items' => 'total_items',
        'failed_items' => 'failed_items',
        'delete_items' => 'delete_items',
        'found_items' => 'found_items'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'total_items' => 'setTotalItems',
        'failed_items' => 'setFailedItems',
        'delete_items' => 'setDeleteItems',
        'found_items' => 'setFoundItems'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'total_items' => 'getTotalItems',
        'failed_items' => 'getFailedItems',
        'delete_items' => 'getDeleteItems',
        'found_items' => 'getFoundItems'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['total_items'] = isset($data['total_items']) ? $data['total_items'] : null;
        $this->container['failed_items'] = isset($data['failed_items']) ? $data['failed_items'] : null;
        $this->container['delete_items'] = isset($data['delete_items']) ? $data['delete_items'] : null;
        $this->container['found_items'] = isset($data['found_items']) ? $data['found_items'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];
        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properteis are valid
     */
    public function valid()
    {
        return true;
    }


    /**
     * Gets total_items
     * @return int
     */
    public function getTotalItems()
    {
        return $this->container['total_items'];
    }

    /**
     * Sets total_items
     * @param int $total_items
     * @return $this
     */
    public function setTotalItems($total_items)
    {
        $this->container['total_items'] = $total_items;

        return $this;
    }

    /**
     * Gets failed_items
     * @return int[]
     */
    public function getFailedItems()
    {
        return $this->container['failed_items'];
    }

    /**
     * Sets failed_items
     * @param int[] $failed_items
     * @return $this
     */
    public function setFailedItems($failed_items)
    {
        $this->container['failed_items'] = $failed_items;

        return $this;
    }

    /**
     * Gets delete_items
     * @return int
     */
    public function getDeleteItems()
    {
        return $this->container['delete_items'];
    }

    /**
     * Sets delete_items
     * @param int $delete_items
     * @return $this
     */
    public function setDeleteItems($delete_items)
    {
        $this->container['delete_items'] = $delete_items;

        return $this;
    }

    /**
     * Gets found_items
     * @return int
     */
    public function getFoundItems()
    {
        return $this->container['found_items'];
    }

    /**
     * Sets found_items
     * @param int $found_items
     * @return $this
     */
    public function setFoundItems($found_items)
    {
        $this->container['found_items'] = $found_items;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\Boxxai\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\Boxxai\ObjectSerializer::sanitizeForSerialization($this));
    }
}


